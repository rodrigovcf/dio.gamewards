{"version":3,"file":"startAsync.js","names":["serverInstance","messageSocket","broadcastMessage","method","params","broadcast","startAsync","projectRoot","exp","getConfig","skipSDKVersionRequirement","options","verbose","assertValidProjectRoot","Analytics","logEvent","developerTool","Config","sdkVersion","watchBabelConfigForProject","webOnly","Webpack","port","webpackPort","Env","shouldUseDevServer","devClient","startDevServerAsync","startExpoServerAsync","startReactNativeServerAsync","hostType","ProjectSettings","readAsync","ConnectionStatus","isOffline","startTunnelsAsync","e","ProjectUtils","logError","message","target","isTargetingNative","DevSession","startSession","stopDevServerAsync","Promise","resolve","reject","closeJsInspector","close","error","stopInternalAsync","stopSession","all","stopAsync","stopExpoServerAsync","stopReactNativeServerAsync","stopTunnelsAsync","Android","maybeStopAdbDaemonAsync","forceQuitAsync","packagerPid","ngrokPid","readPackagerInfoAsync","process","kill","setPackagerInfoAsync","expoServerPort","packagerPort","expoServerNgrokUrl","packagerNgrokUrl","webpackServerPort","result","race","setTimeout"],"sources":["../../src/start/startAsync.ts"],"sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { closeJsInspector, MessageSocket } from '@expo/dev-server';\nimport { Server } from 'http';\n\nimport {\n  Analytics,\n  Android,\n  assertValidProjectRoot,\n  Config,\n  ConnectionStatus,\n  DevSession,\n  Env,\n  ProjectSettings,\n  ProjectUtils,\n  startDevServerAsync,\n  StartDevServerOptions,\n  startExpoServerAsync,\n  startReactNativeServerAsync,\n  startTunnelsAsync,\n  stopExpoServerAsync,\n  stopReactNativeServerAsync,\n  stopTunnelsAsync,\n  Webpack,\n} from '../internal';\nimport { watchBabelConfigForProject } from './watchBabelConfig';\n\nlet serverInstance: Server | null = null;\nlet messageSocket: MessageSocket | null = null;\n\n/**\n * Sends a message over web sockets to any connected device,\n * does nothing when the dev server is not running.\n *\n * @param method name of the command. In RN projects `reload`, and `devMenu` are available. In Expo Go, `sendDevCommand` is available.\n * @param params\n */\nexport function broadcastMessage(\n  method: 'reload' | 'devMenu' | 'sendDevCommand',\n  params?: Record<string, any> | undefined\n) {\n  if (messageSocket) {\n    messageSocket.broadcast(method, params);\n  }\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  {\n    exp = getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp,\n    ...options\n  }: StartDevServerOptions & { exp?: ExpoConfig } = {},\n  verbose: boolean = true\n): Promise<ExpoConfig> {\n  assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Start Project', {\n    developerTool: Config.developerTool,\n    sdkVersion: exp.sdkVersion ?? null,\n  });\n\n  watchBabelConfigForProject(projectRoot);\n\n  if (options.webOnly) {\n    await Webpack.startAsync(projectRoot, {\n      ...options,\n      port: options.webpackPort,\n    });\n  } else if (Env.shouldUseDevServer(exp) || options.devClient) {\n    [serverInstance, , messageSocket] = await startDevServerAsync(projectRoot, options);\n  } else {\n    await startExpoServerAsync(projectRoot);\n    await startReactNativeServerAsync({ projectRoot, exp, options, verbose });\n  }\n\n  const { hostType } = await ProjectSettings.readAsync(projectRoot);\n\n  if (!ConnectionStatus.isOffline() && hostType === 'tunnel') {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e: any) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error starting ngrok: ${e.message}`);\n    }\n  }\n\n  const target = !options.webOnly || Webpack.isTargetingNative() ? 'native' : 'web';\n  // This is used to make Expo Go open the project in either Expo Go, or the web browser.\n  // Must come after ngrok (`startTunnelsAsync`) setup.\n  DevSession.startSession(projectRoot, exp, target);\n  return exp;\n}\n\nasync function stopDevServerAsync() {\n  return new Promise<void>((resolve, reject) => {\n    if (serverInstance) {\n      closeJsInspector();\n      serverInstance.close(error => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    }\n  });\n}\n\nasync function stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n\n  await Promise.all([\n    Webpack.stopAsync(projectRoot),\n    stopDevServerAsync(),\n    stopExpoServerAsync(projectRoot),\n    stopReactNativeServerAsync(projectRoot),\n    async () => {\n      if (!ConnectionStatus.isOffline()) {\n        try {\n          await stopTunnelsAsync(projectRoot);\n        } catch (e: any) {\n          ProjectUtils.logError(projectRoot, 'expo', `Error stopping ngrok: ${e.message}`);\n        }\n      }\n    },\n    await Android.maybeStopAdbDaemonAsync(),\n  ]);\n}\n\nasync function forceQuitAsync(projectRoot: string) {\n  // find RN packager and ngrok pids, attempt to kill them manually\n  const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerPid) {\n    try {\n      process.kill(packagerPid);\n    } catch {}\n  }\n  if (ngrokPid) {\n    try {\n      process.kill(ngrokPid);\n    } catch {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n    packagerPort: null,\n    packagerPid: null,\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n    webpackServerPort: null,\n  });\n}\n\nexport async function stopAsync(projectRoot: string): Promise<void> {\n  try {\n    const result = await Promise.race([\n      stopInternalAsync(projectRoot),\n      new Promise(resolve => setTimeout(resolve, 2000, 'stopFailed')),\n    ]);\n    if (result === 'stopFailed') {\n      await forceQuitAsync(projectRoot);\n    }\n  } catch (error: any) {\n    await forceQuitAsync(projectRoot);\n    throw error;\n  }\n}\n"],"mappings":"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"}